// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CartProduct cart product
//
// swagger:model CartProduct
type CartProduct struct {

	// cart
	// Required: true
	Cart *Cart `json:"cart"`

	// id
	ID string `json:"id,omitempty"`

	// price
	// Required: true
	Price *float64 `json:"price"`

	// product
	Product *Product `json:"product,omitempty"`

	// quantit
	Quantit float64 `json:"quantit,omitempty"`
}

// Validate validates this cart product
func (m *CartProduct) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartProduct) validateCart(formats strfmt.Registry) error {

	if err := validate.Required("cart", "body", m.Cart); err != nil {
		return err
	}

	if m.Cart != nil {
		if err := m.Cart.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cart")
			}
			return err
		}
	}

	return nil
}

func (m *CartProduct) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *CartProduct) validateProduct(formats strfmt.Registry) error {
	if swag.IsZero(m.Product) { // not required
		return nil
	}

	if m.Product != nil {
		if err := m.Product.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("product")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cart product based on the context it is used
func (m *CartProduct) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProduct(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CartProduct) contextValidateCart(ctx context.Context, formats strfmt.Registry) error {

	if m.Cart != nil {
		if err := m.Cart.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cart")
			}
			return err
		}
	}

	return nil
}

func (m *CartProduct) contextValidateProduct(ctx context.Context, formats strfmt.Registry) error {

	if m.Product != nil {
		if err := m.Product.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("product")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CartProduct) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CartProduct) UnmarshalBinary(b []byte) error {
	var res CartProduct
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
